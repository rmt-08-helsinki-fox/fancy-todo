const { User } = require('../models')
const { comparePassword } = require('../helpers/bcrypt')
const { generateToken } = require('../helpers/jwt')
const { OAuth2Client } = require('google-auth-library');


class UserController {
  static register(req, res, next) {
    const { email, password, name } = req.body
    User.create({
      email,
      password,
      name
    })
      .then(data => {
        res.status(201).json(data)
      })
      .catch(err => {
        next(err)
      })
  }

  static login(req, res, next) {
    const { email, password } = req.body
    User.findOne({
      where: {
        email: email
      }
    })
      .then(user => {
        const customError = { name: "INVALID_EMAIL_OR_PASSWORD" }
        if (!user) throw customError
        const comparePass = comparePassword(password, user.password)
        if (!comparePass) throw customError
        const token = generateToken({
          id: user.id,
          email: user.email,
          name: user.name
        })
        res.status(200).json({ token })
      })
      .catch(err => {
        next(err)
      })
  }


  static googleSignin(req, res, next) {
    const client = new OAuth2Client(process.env.CLIENT_ID);
    let id = 0
    let email = ""
    let name = ""
    let status = 200
    client.verifyIdToken({
      idToken: req.body.token,
      audience: process.env.CLIENT_ID
    })
      .then(ticket => {
        const payload = ticket.getPayload();
        email = payload.email
        name = payload.name
        return User.findOne({
          where: {
            email,
            name
          }
        })
      })
      .then(user => {
        if (user) {
          return user
        } else {
          status = 201
          return User.create({
            email,
            password: "autogeneratedpassword",
            name
          })
        }
      })
      .then(user => {
        const token = generateToken({
          id: user.id,
          email: user.email,
          name: user.name
        })
        res.status(status).json({ token })
      })
      .catch(err => {
        next(err)
      })

  }
}

module.exports = UserController